@color: #e92322;

div {
  color: @color;
}

// lessc -v
// lessc test.less test.css  将less文件编译为css文件

// 添加自动解析功能, addWatch

/*注释  才会编译*/
//这也是样式,但不会编译
/*变量 @变量名:值;*/
@baseColor: #e92322;
a {
  color: @color;
}

/*混入:可以将一个定义好的样式引入到另一个样式中,类似于函数的调用*/
.addRadius {
  border-radius: 10px;
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
}

/*以前需要写三句,现在简单调用即可*/
div {
  width: 200px;
  height: 200px;
  /*引入已经写好的圆角样式*/
  .addRadius;
}


/*写法二定义了一个函数的参数*/
.addRadius(@r) {
  border-radius: @r;
  -webkit-border-radius: @r;
  -moz-border-radius: @r;
}
div1{
  /*传入参数*/
  .addRadius(5px)
}

/*写法三参数的默认值*/
.addRadius1(@r:10px) {
  border-radius: @r;
  -webkit-border-radius: @r;
  -moz-border-radius: @r;
}
div2{
  /*传入参数:没有传参数,默认10像素, 传了参数就是传递的参数的值*/
  .addRadius1()
}
/*嵌套:实现选择器的继承,可以减少代码量,同时使代码结构更加清晰*/
.jd_header{
  width: 100%;
  height: 200px;
  .addRadius1();
  div{
    width: 100%;
    &::before{
      content: '';
    }
  }
  >div{
    width: 100%;
    > a{
      text-decoration: underline;
      &:hover{
        text-decoration: none;
      }
    }
    >h3{
      height: 200px;
    }
  }
  ul{
    list-style: none;
  }
}
/*
.jd_header{

}

.jd_header>div{

}

.jd_header>div>h3{

}
.jd_header>div>h3:before{

}

.jd_header>div>a{

}
.jd_header>div>a:hover{

}*/

